/**
 * This tests the CUDA implementation of TorchMLForce.
 */

#include "PyTorchForce.h"
#include "openmm/internal/AssertionUtilities.h"
#include "openmm/Context.h"
#include "openmm/Platform.h"
#include "openmm/System.h"
#include "openmm/VerletIntegrator.h"
#include "openmm/CustomNonbondedForce.h"
#include "sfmt/SFMT.h"
#include <cmath>
#include <iostream>
#include <vector>

using namespace PyTorchPlugin;
using namespace OpenMM;
using namespace std;

extern "C" OPENMM_EXPORT void registerPyTorchCudaKernelFactories();

void testForce() {
  	// Create a random cloud of particles.

	const int numParticles = 8;
	System system;
	vector<Vec3> positions(numParticles);
	OpenMM_SFMT::SFMT sfmt;
	init_gen_rand(0, sfmt);
	for (int i = 0; i < numParticles; i++) {
		system.addParticle(1.0);
	}

	// COORDS                                                                                                                                    
	positions = {
		Vec3( 4.6060,  1.8831, -2.1644),
		Vec3( 0.8724,  2.2184, -2.2813),
		Vec3( 0.2013, -3.8510,  1.3834),
		Vec3(-0.9401,  6.5539,  2.7292),
		Vec3( 0.1224, -2.6053, -1.0756),
		Vec3( 4.4346, -1.4744, -3.6015),
		Vec3(-1.3761, -1.1631, -5.8529),
		Vec3( 2.0171, -0.6451,  3.6609)};

	// SIGMA                                                                                                                                     
	float sigma = 12.5;

	// ATOMS                                                                                                                                     
	vector<int> atoms = {9, 9, 54, 54, 0, 0, 0, 0};

	// BONDS                                                                                                                                     
	vector<vector<int>> bonds = {
		{1, 0},
		{1, 2},
		{0, 3},
		{4, 0},
		{5, 0},
		{6, 1},
		{7, 1}};

	// ANGLES                                                                                                                                    
	vector<vector<int>> angles = {
		{1, 0, 3, 0},
		{4, 0, 1, 0},
		{5, 0, 1, 0},
		{4, 0, 3, 0},
		{5, 0, 3, 0},
		{5, 0, 4, 0},
		{0, 1, 2, 0},
		{6, 1, 0, 0},
		{7, 1, 0, 0},
		{6, 1, 2, 0},
		{7, 1, 2, 0},
		{7, 1, 6, 0}};

	// PROPERS                                                                                                                                   
	vector<vector<int>> propers = {
		{3, 0, 1, 2, 0},
		{6, 1, 0, 3, 0},
		{7, 1, 0, 3, 0},
		{4, 0, 1, 2, 0},
		{4, 0, 1, 6, 0},
		{4, 0, 1, 7, 0},
		{5, 0, 1, 2, 0},
		{5, 0, 1, 6, 0},
		{5, 0, 1, 7, 0}};

	// IMPROPERS                                                                                                                                 
	vector<vector<int>> impropers = {
		{0, 4, 1, 3, 0},
		{0, 5, 1, 3, 0},
		{0, 4, 5, 1, 0},
		{0, 4, 5, 3, 0},
		{1, 6, 0, 2, 0},
		{1, 7, 0, 2, 0},
		{1, 6, 7, 0, 0},
		{1, 6, 7, 2, 0}};

	// PAIRS (empty)                                                                                                                             
	vector<vector<int>> pairs = {};

	// TETRAS (empty)                                                                                                                            
	vector<vector<int>> tetras = {};

	// CISTRANS (empty)                                                                                                                          
	vector<vector<int>> cistrans = {};

	// ENCODING (truncated to save space â€“ full version can be inserted similarly)    
	vector<vector<float>> encoding = {
		{-0.081649, -0.0015378, 0.10050, 0.082201, -0.047480,
			-0.012450, -0.010027, 0.0048477, -0.016389, 0.020203,
			-0.032699, 0.022310, 0.049317, -0.11148, -0.029759,
			0.061492, 0.076166, -0.10274, -0.054886, 0.045912,
			0.054642, 0.18103, 0.0087257, 0.077600, 0.12627,
			0.052715, -0.074887, 0.017302, -0.00015223, -0.083580,
			0.034830, -0.14402, 0.10280, 0.048161, 0.067555,
			0.037597, 0.068625, -0.0084031, 0.0004996, 0.046725,
			0.011753, -0.049424, 0.17502, -0.051804, -0.16493,
			-0.11057, -0.054029, -0.037924, -0.059407, -0.042975},

		{-0.081649, -0.0015377, 0.10050, 0.082201, -0.047480,
			-0.012450, -0.010027, 0.0048476, -0.016389, 0.020203,
			-0.032699, 0.022310, 0.049317, -0.11148, -0.029759,
			0.061492, 0.076166, -0.10274, -0.054886, 0.045912,
			0.054642, 0.18103, 0.0087257, 0.077600, 0.12627,
			0.052715, -0.074887, 0.017302, -0.00015223, -0.083580,
			0.034830, -0.14402, 0.10280, 0.048161, 0.067555,
			0.037597, 0.068625, -0.0084031, 0.00049963, 0.046725,
			0.011753, -0.049424, 0.17502, -0.051804, -0.16493,
			-0.11057, -0.054029, -0.037924, -0.059407, -0.042975},

			{0.10370, -0.17489, 0.18152, 0.089564, 0.097894,
			-0.017356, 0.11617, 0.20046, 0.019493, -0.078709,
			-0.076407, 0.17271, -0.097080, -0.0093316, -0.00096356,
				0.20900, -0.075171, -0.073469, 0.014592, -0.0097682,
				0.12157, -0.030527, -0.13705, -0.10012, 0.019872,
			-0.22591, -0.12212, -0.23457, 0.27512, 0.14441,
				0.013926, -0.017211, -0.0096408, 0.15242, -0.13656,
			-0.10519, -0.15193, -0.055021, -0.093509, 0.057634,
			-0.056052, -0.13467, 0.081670, -0.032829, -0.0080635,
			-0.11201, 0.10716, -0.10961, -0.031396, -0.024969},
		
			{0.10370, -0.17489, 0.18152, 0.089564, 0.097894,
			-0.017356, 0.11617, 0.20046, 0.019493, -0.078709,
			-0.076407, 0.17271, -0.097080, -0.0093316, -0.00096359,
				0.20900, -0.075171, -0.073469, 0.014592, -0.0097682,
				0.12157, -0.030527, -0.13705, -0.10012, 0.019872,
			-0.22591, -0.12212, -0.23457, 0.27512, 0.14441,
				0.013926, -0.017211, -0.0096408, 0.15242, -0.13656,
			-0.10519, -0.15193, -0.055021, -0.093509, 0.057634,
			-0.056052, -0.13467, 0.081670, -0.032829, -0.0080635,
			-0.11201, 0.10716, -0.10961, -0.031396, -0.024969},
		
			{0.083247, -0.31478, 0.13310, 0.079229, -0.097505,
				0.0057424, -0.028672, 0.0075237, -0.18482, -0.0093641,
			-0.017010, 0.12259, -0.073314, -0.079270, 0.043773,
				0.035813, 0.011327, 0.017704, -0.076911, -0.046275,
				0.025984, 0.038506, -0.23647, -0.066224, -0.0029742,
				0.023640, -0.014072, -0.068485, 0.12095, -0.011457,
				0.093433, 0.15859, -0.066859, 0.13676, 0.032822,
			-0.19903, 0.0001575, 0.11682, -0.045786, 0.14800,
			-0.14013, -0.15679, 0.064909, 0.15653, -0.0092724,
			-0.074328, 0.12925, 0.027182, 0.018693, -0.024841},
		
				{ 0.083247, -0.31478,  0.13310,  0.079229, -0.097505,
				0.0057424, -0.028672,  0.0075237, -0.18482, -0.0093641,
			-0.017010,  0.12259, -0.073314, -0.079270,  0.043773,
				0.035813,  0.011327,  0.017704, -0.076910, -0.046275,
				0.025984,  0.038506, -0.23647, -0.066224, -0.0029742,
				0.023640, -0.014072, -0.068485,  0.12095, -0.011457,
				0.093433,  0.15859, -0.066859,  0.13676,  0.032823,
			-0.19903,  0.0001576,  0.11682, -0.045786,  0.14800,
			-0.14013, -0.15679,  0.064908,  0.15653, -0.0092723,
			-0.074328,  0.12925,  0.027182,  0.018693, -0.024841},
		
			{ 0.083247, -0.31478,  0.13310,  0.079229, -0.097505,
				0.0057424, -0.028672,  0.0075237, -0.18482, -0.0093641,
			-0.017010,  0.12259, -0.073314, -0.079270,  0.043773,
				0.035813,  0.011327,  0.017704, -0.076910, -0.046275,
				0.025984,  0.038506, -0.23647, -0.066224, -0.0029742,
				0.023640, -0.014072, -0.068485,  0.12095, -0.011457,
				0.093433,  0.15859, -0.066859,  0.13676,  0.032823,
			-0.19903,  0.0001576,  0.11682, -0.045786,  0.14800,
			-0.14013, -0.15679,  0.064908,  0.15653, -0.0092723,
			-0.074328,  0.12925,  0.027182,  0.018693, -0.024841},
		
			{ 0.083247, -0.31478,  0.13310,  0.079229, -0.097505,
				0.0057424, -0.028672,  0.0075237, -0.18482, -0.0093641,
			-0.017010,  0.12259, -0.073314, -0.079270,  0.043773,
				0.035813,  0.011327,  0.017704, -0.076910, -0.046275,
				0.025984,  0.038506, -0.23647, -0.066224, -0.0029742,
				0.023640, -0.014072, -0.068485,  0.12095, -0.011457,
				0.093433,  0.15859, -0.066859,  0.13676,  0.032823,
			-0.19903,  0.0001576,  0.11682, -0.045786,  0.14800,
			-0.14013, -0.15679,  0.064908,  0.15653, -0.0092723,
			-0.074328,  0.12925,  0.027182,  0.018693, -0.024841}};

	std::vector<int> pindices={0, 1, 2, 3, 4, 5, 6, 7};
	std::vector<double> weights={1,1,1,1};
	double scale = 1.0;

	PyTorchForceE2EDiffConf* force = new PyTorchForceE2EDiffConf("tests/test_scriptE2EDiffConf.pt",
																pindices,
																weights,
																scale,
																atoms, bonds, angles, propers, impropers, pairs, tetras, cistrans, encoding);
																
	system.addForce(force);

	CustomNonbondedForce* cnb_force = new CustomNonbondedForce("epsilon*(sigma/r)^12;sigma=0.5*(sigma1+sigma2);epsilon=sqrt(epsilon1*epsilon2)");
	cnb_force->addPerParticleParameter("sigma");
	cnb_force->addPerParticleParameter("epsilon");

	vector<double> param = {0.02, 2.0};
	for (int i = 0; i < numParticles; i++) {
		cnb_force->addParticle(param);
	}
	cnb_force->addGlobalParameter("diff_sigma", 1.0);

	system.addForce(cnb_force);
	
  	// Compute the forces and energy.

	VerletIntegrator integ(1.0);
	Platform& platform = Platform::getPlatformByName("CUDA");
	Context context(system, integ, platform);
	context.setParameter("diffTime",0.5);
	context.setPositions(positions);
	State state = context.getState(State::Energy | State::Forces);
		
}


int main(int argc, char* argv[]) {
	try {
		registerPyTorchCudaKernelFactories();
		if (argc > 1)
			Platform::getPlatformByName("CUDA").setPropertyDefaultValue("Precision", string(argv[1]));
		testForce();
	}
	catch(const std::exception& e) {
		std::cout << "exception: " << e.what() << std::endl;
		return 1;
	}
	std::cout << "Done" << std::endl;
	return 0;
}
